# This is the 'pass-2' of '2-pass SIC assembler', files generated by 'pass-1' are required for successful execution.

# Loading OPTAB from OPTAB.txt
optab=Hash.new
op_file=File.open("OPTAB.txt")
while line=op_file.gets
		line=line.split
		optab[line[1]]=line[0]
		end
op_file.close

# Loading SYMTAB from SYMTAB.txt generated during 'pass 1'
symtab=Hash.new
sym_file=File.open("SYMTAB.txt")
while line=sym_file.gets
		line=line.split
		symtab[line[0]]=line[1]
		end
sym_file.close

# Reading 'intermedaite.txt' and writing 'intermediate_with_object_code.txt' and'object_program.txt'
intermediate=File.open("intermediate.txt")
locctr=File.open("LOCCTR.txt")
object_prog=File.open("object_program.txt","w")
intermediate_with_object_code=File.open("intermediate_with_object_code.txt","w")

# Writing Header record
start_addr=0
while line_org=intermediate.gets
	line=line_org.split
	if line[1]=='START'
		start_addr=line[2]
		end_addr=locctr.gets.split[1]
		size=((end_addr.to_i(16)-start_addr.to_i(16)).to_s(16)).to_s
		object_prog.puts "H^"+line[0].ljust(6,' ')+"^"+start_addr.rjust(6,'0')+"^"+size.rjust(6,'0')
		intermediate_with_object_code.puts(line_org)
		break
	end
end
locctr.close

# Writing Text Records
text_record_length=0
text_record_addr=start_addr
text_record=''
write_text_record=lambda { |object_prog,text_record_addr,text_record_length,text_record| object_prog.puts "T^"+text_record_addr.to_s.rjust(6,'0')+"^"+((text_record_length/2).to_s(16)).to_s.rjust(2,'0')+text_record }
while line_org=intermediate.gets

	line=line_org.split
	if line[0]=='END'
		# Writing End Record
		write_text_record.call(object_prog,text_record_addr,text_record_length,text_record)
		object_prog.puts "E^"+start_addr.rjust(6,'0')
		intermediate_with_object_code.puts(line_org)
		break
	end
	last=line[-1]
	slast=line[-2]
	if optab[last]
		if text_record_length+6>60
			write_text_record.call(object_prog,text_record_addr,text_record_length,text_record)
			text_record_length=6
			text_record_addr=line[0].rjust(6,'0')
			text_record=optab[last]+"0000"
		else
			if text_record_length!=0
				text_record+="^"
			else
				text_record_addr=line[0].rjust(6,'0')
			end
			text_record_length+=6
			text_record+=optab[last]+"0000"
		end
		intermediate_with_object_code.puts(line_org.rstrip+"\t\t\t"+optab[last]+"0000")
	
	else
		
		if symtab[last]
			if text_record_length+(optab[slast].length+symtab[last].length)>60
				write_text_record.call(object_prog,text_record_addr,text_record_length,text_record)
				text_record_length=(optab[slast].length+symtab[last].length)
				text_record_addr=line[0].rjust(6,'0')
				text_record="^"+optab[slast]+symtab[last]
			else
				if text_record_length!=0
					text_record+="^"
				else
					text_record_addr=line[0].rjust(6,'0')
				end
				text_record_length+=(optab[slast].length+symtab[last].length)
				text_record+=optab[slast]+symtab[last]
			end
			intermediate_with_object_code.puts(line_org.rstrip+"\t\t"+optab[slast]+symtab[last])
	
		elsif	last.slice(-2,2)==',X'
			if text_record_length+(optab[slast].length+symtab[last.slice(0..-3)].length)>60
				write_text_record.call(object_prog,text_record_addr,text_record_length,text_record)
				text_record_length=(optab[slast].length+symtab[last.slice(0..-3)].length)
				text_record_addr=line[0].rjust(6,'0')
				text_record="^"+optab[slast]+((symtab[last.slice(0..-3)]).to_i(16)+2**15).to_s(16)
			else
				if text_record_length!=0
					text_record+="^"
				else
					text_record_addr=line[0].rjust(6,'0')
				end
				text_record_length+=(optab[slast].length+symtab[last.slice(0..-3)].length)
				text_record+=optab[slast]+((symtab[last.slice(0..-3)]).to_i(16)+2**15).to_s(16)
			end
			intermediate_with_object_code.puts(line_org.rstrip+"\t"+optab[slast]+((symtab[last.slice(0..-3)]).to_i(16)+2**15).to_s(16))
	
		elsif slast=='WORD'
			if text_record_length+6>60
				write_text_record.call(object_prog,text_record_addr,text_record_length,text_record)
				text_record_length=6
				text_record_addr=line[0].rjust(6,'0')
				text_record="^"+last.to_i(16).to_s.rjust(6,'0')
			else
				if text_record_length!=0
					text_record+="^"
				else
					text_record_addr=line[0].rjust(6,'0')
				end
				text_record_length+=6
				text_record+=last.to_i(16).to_s.rjust(6,'0')
			end
			intermediate_with_object_code.puts(line_org.rstrip+"\t\t"+last.to_i(16).to_s.rjust(6,'0'))
	
		elsif slast=='RESW'
			if text_record_length!=0
				write_text_record.call(object_prog,text_record_addr,text_record_length,text_record)
				text_record=''
				text_record_length=0
			end
			intermediate_with_object_code.puts(line_org)
	
		elsif slast=='RESB'
			if text_record_length!=0
				write_text_record.call(object_prog,text_record_addr,text_record_length,text_record)
				text_record=''
				text_record_length=0
			end
			intermediate_with_object_code.puts(line_org)
		
		elsif slast=='BYTE'
			
			if last[0]=='C'
				if text_record_length+(last.slice(2..-2).unpack('H*')[0]).length>60
					write_text_record.call(object_prog,text_record_addr,text_record_length,text_record)
					text_record_length=(last.slice(2..-2).unpack('H*')[0]).length
					text_record_addr=line[0].rjust(6,'0')
					text_record="^"+last.slice(2..-2).unpack('H*')[0]
				else
					if text_record_length!=0
						text_record+="^"
					else
						text_record_addr=line[0].rjust(6,'0')
					end
					text_record_length+=(last.slice(2..-2).unpack('H*')[0]).length
					text_record+=last.slice(2..-2).unpack('H*')[0]
				end
				intermediate_with_object_code.puts(line_org.rstrip+"\t\t"+last.slice(2..-2).unpack('H*')[0])
			
			elsif last[0]=='X'
					if text_record_length+(last.slice(2..-2)).length>60
						write_text_record.call(object_prog,text_record_addr,text_record_length,text_record)
						text_record_length=(last.slice(2..-2)).length
						text_record_addr=line[0].rjust(6,'0')
						text_record="^"+last.slice(2..-2)
					else
						if text_record_length!=0
							text_record+="^"
						else
							text_record_addr=line[0].rjust(6,'0')
						end
						text_record_length+=(last.slice(2..-2)).length
						text_record+=last.slice(2..-2)
					end
					intermediate_with_object_code.puts(line_org.rstrip+"\t\t"+last.slice(2..-2))
			end	
		end
	end
end
object_prog.close
intermediate.close
intermediate_with_object_code.close
